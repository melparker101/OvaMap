# https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_ov

# We want to use Cellranger to 
# (1) map sequence reads to the human genome GRCm38; and 
# (2) perform the UMI and gene-level counts against Ensembl gene model <V100>
#
# First, pick out and make a txt file for 10X datasets
# Second, find number of cells (in metadata?)
# Follow cellranger tutorial https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_ct

##need to rename your fastq files so tha they fit this format.
#_L00#_  represents lane number
# mv  SRR8111691_1.fastq.gz SRR8111691_S1_L001_R1_001.fastq.gz
# mv  SRR8111691_2.fastq.gz SRR8111691_S1_L001_R2_001.fastq.gz
# mv  SRR8111692_1.fastq.gz SRR8111692_S1_L002_R1_001.fastq.gz
# mv  SRR8111692_2.fastq.gz SRR8111692_S1_L002_R2_001.fastq.gz
# mv  SRR8111693_1.fastq.gz SRR8111693_S1_L003_R1_001.fastq.gz
# mv  SRR8111693_2.fastq.gz SRR8111693_S1_L003_R2_001.fastq.gz
# mv  SRR8111694_1.fastq.gz SRR8111694_S1_L004_R1_001.fastq.gz
# mv  SRR8111694_2.fastq.gz SRR8111694_S1_L004_R2_001.fastq.gz
# https://bioinformaticsworkbook.org/dataAnalysis/RNA-Seq/Single_Cell_RNAseq/Chromium_Cell_Ranger.html#gsc.tab=0

# read this https://kb.10xgenomics.com/hc/en-us/articles/115003802691-How-do-I-prepare-Sequence-Read-Archive-SRA-data-from-NCBI-for-Cell-Ranger-

# HypoMap:
# For 10X datasets (including nucSeq), Cellranger Version 6.0.1 (5.0.1 for nucSeq) was used to 
# (1) map sequence reads to the mouse genome GRCm38 (mm10); and 
# (2) perform the UMI and gene-level counts against Ensembl gene model V100, with Gm28040 removed to recover Kiss1 expression. 
# The per-cell gene count tables (in HDF5) generated by the software were then used for downstream analyses.

# Example
REF_GENOMES=$1  # Reference genomes directory
PROJECT=PRJNA421274
READ=SRR6350505
N_CELLS=3000

REF=$REF_GENOMES/homo_sapiens/10xgenomics

# Load modules
module load CellRanger/7.1.0

# mkdir -p "$REF"
wget https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-2020-A.tar.gz -P "$REF"

# Download reference file (this takes a while)
tar -xvf "$REF"/refdata-gex-GRCh38-2020-A.tar.gz 
rm "$REF"/refdata-gex-GRCh38-2020-A.tar.gz

# https://emea.support.illumina.com/content/dam/illumina-support/documents/documentation/software_documentation/bcl2fastq/bcl2fastq2-v2-20-software-guide-15051736-03.pdf
# Go to page 17

# Extract the lane number or fastq files that have multiple runs per sample
zcat SRR16093329_2.fastq.gz | awk -F: '{print $4}' | head -1

# Extract the machine number 
zcat SRR21536711_1.fastq.gz | awk -F'[:\" "]' '{print $2}' | head -1

# Extract the length of file that isn't zipped
length=$(cat SRR21536717_1.fastq | awk -F'[=\" "]' '{print $4}' | head -1)

# Redo with these settings because some biological reads were labeled as technical on sra (-S = --split-reads?)
nohup cat PRJNA879764_SraAccList.txt | parallel fasterq-dump sra_files/{} --include-technical -S -O raw_reads3 &> logs/output_fq.out &

# module load SRA-Toolkit/3.0.0-centos_linux64
# module load parallel/20210722-GCCcore-11.2.0
# cd PRJNA792835
# mkdir logs
# nohup cat PRJNA792835_SraAccList.txt | parallel fasterq-dump sra_files/{} --include-technical -S -O raw_reads3 &> logs/output_fq.out &
# ps -xw

# cd ..
# PROJECT=PRJNA792835
# cat "$PROJECT"/"$PROJECT"_SraAccList.txt | parallel gzip "$PROJECT"/raw_reads/{}*.fastq

# cd PRJNA849410
mkdir logs
nohup cat PRJNA849410_SraAccList.txt | parallel fasterq-dump sra_files/{} --include-technical -S -O raw_reads3 &> logs/output_fq.out &
# ps -xw
# 206773

# cd ..
# PROJECT=PRJNA849410
# cat "$PROJECT"/"$PROJECT"_SraAccList.txt | parallel gzip "$PROJECT"/raw_reads/{}*.fastq

# Rename the reads that are only split into two
# p = read accession number
# Extract read length from header using awk -F'[=\" "]' - this means separate fields using = and " "
while read p; do
    lane="$(cat "$p"_1.fastq | awk -F: '{print $4}' | head -1)"
    length="$(cat "$p"_1.fastq | awk -F'[=\" "]' '{print $4}' | head -1)"
    if [[ ! -f "$p"_3.fastq ]]; then
      if [[ $length == 28 ]]; then
        echo "$p"_S1_L00"$lane"_R1_001.fastq.gz
        mv "$p"_1.fastq "$p"_S1_L00"$lane"_R1_001.fastq
        mv "$p"_2.fastq "$p"_S1_L00"$lane"_R2_001.fastq
      else 
        echo "Name of fastq file was not changed as reads from "$p"_1.fastq did not have length=28."
      fi
    fi
done <../PRJNA879764_SraAccList.txt

# Rename the reads that split into three
while read p; do
  if [[ -f "$p"_3.fastq ]]; then
  lane=$(cat "$p"_1.fastq | awk -F: '{print $4}' | head -1)
  length1=$(cat "$p"_1.fastq | awk -F'[=\" "]' '{print $4}' | head -1)
  length2=$(cat "$p"_2.fastq | awk -F'[=\" "]' '{print $4}' | head -1)
  echo $length1
  echo $length2
    if [[ $length1 == 8 && $length2 == 28 ]]; then
      echo "$p"
        mv "$p"_2.fastq "$p"_S1_L00"$lane"_R1_001.fastq
        mv "$p"_3.fastq "$p"_S1_L00"$lane"_R2_001.fastq
    else 
      echo "$p"
      echo "Name of fastq file was not changed as reads from "$p"_2.fastq did not have length=28."
    fi
  fi
done <../PRJNA879764_SraAccList.txt

# Quick test - see if all R1 have length 28 from header
for f in *S1_L004_R1_001.fastq; do  cat $f | head -1 ; done

# Do the same for R2 - these should have length >28, e.g. 150
for f in *S1_L004_R2_001.fastq; do  cat $f | head -1 ; done

# Page for length of R1 and R2
# https://www.10xgenomics.com/support/single-cell-gene-expression/documentation/steps/sequencing/sequencing-requirements-for-single-cell-3

# --sample $READ excluded as we want to use all (S1)
# Run cellranger to align and quantify
cellranger count --id run_count_"$PROJECT" --transcriptome ../"$REF"/refdata-gex-GRCh38-2020-A.tar.gz \
                 --fastqs "$PROJECT"/raw_reads3  \
                 
     
